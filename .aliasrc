#             _   _     _      _                 _ _
#  __ _  ___ | |_| |__ | | ___| |_ _   _    __ _| (_) __ _ ___
# / _` |/ _ \| __| '_ \| |/ _ \ __| | | |  / _` | | |/ _` / __|
#| (_| | (_) | |_| |_) | |  __/ |_| |_| | | (_| | | | (_| \__ \
# \__, |\___/ \__|_.__/|_|\___|\__|\__,_|  \__,_|_|_|\__,_|___/
# |___/
#
#       DESC: ZSH/BASH Compatible Alias/Functions
#
#       http://www.youtube.com/user/gotbletu
#       https://twitter.com/gotbletu
#       https://plus.google.com/+gotbletu
#       https://github.com/gotbletu
#       gotbletu@gmail.com


####################
##### SYSTEM #######
####################

#-------- Exports {{{
#------------------------------------------------------
# set display
export DISPLAY=:0

# set 256color support (doesnt work with older apps like abook)
#export TERM="screen-256color"
# export TERM="xterm-256color"

# find alternative apps if it is installed on your system
find_alt() { for i;do which "$i" >/dev/null && { echo "$i"; return 0;};done;return 1; }

# set the default program
# the first program in the array that is detected on your system will be chosen as the default
#export OPENER=$(find_alt xdg-open exo-open gnome-open )
export BROWSER=$(find_alt chromium chromium-browser qutebrowser google-chrome firefox $OPENER )
#export BROWSERCLI=$(find_alt w3m links2 links lynx elinks $OPENER )
export COMICER=$(find_alt mcomix comix zathura $OPENER )
#export EBOOKER=$(find_alt ebook-viewer $OPENER )
export EDITOR=$(find_alt vim emacs nano leafpad gedit pluma $OPENER )
#export WORDPROCESSOR=$(find_alt wordgrinder $OPENER )
export FILEMANAGER=$(find_alt pcmanfm thunar nautilus dolphin spacefm enlightenment_filemanager $OPENER )
export MUSICER=$(find_alt mplayer mpg123 mpv cvlc $OPENER )
export PAGER=$(find_alt less more most)
export PLAYER=$(find_alt mplayer mpv cvlc $OPENER )
export READER=$(find_alt mupdf zathura evince $OPENER )
#export ROOTER=$(find_alt gksudo kdesudo )
export IMAGEVIEWER=$(find_alt ristretto feh display eog $OPENER )

#}}}
#-------- Bash Color Code {{{
#------------------------------------------------------
# LINK: https://wiki.archlinux.org/index.php?title=Bash/Prompt_customization&oldid=419076#List_of_colors_for_prompt_and_Bash

# Reset
#Color_Off='\e[0m'       # Text Reset
#
## Regular Colors
#Black='\e[0;30m'        # Black
#Red='\e[0;31m'          # Red
#Green='\e[0;32m'        # Green
#Yellow='\e[0;33m'       # Yellow
#Blue='\e[0;34m'         # Blue
#Purple='\e[0;35m'       # Purple
#Cyan='\e[0;36m'         # Cyan
#White='\e[0;37m'        # White
#
## Bold
#BBlack='\e[1;30m'       # Black
#BRed='\e[1;31m'         # Red
#BGreen='\e[1;32m'       # Green
#BYellow='\e[1;33m'      # Yellow
#BBlue='\e[1;34m'        # Blue
#BPurple='\e[1;35m'      # Purple
#BCyan='\e[1;36m'        # Cyan
#BWhite='\e[1;37m'       # White
#
## Underline
#UBlack='\e[4;30m'       # Black
#URed='\e[4;31m'         # Red
#UGreen='\e[4;32m'       # Green
#UYellow='\e[4;33m'      # Yellow
#UBlue='\e[4;34m'        # Blue
#UPurple='\e[4;35m'      # Purple
#UCyan='\e[4;36m'        # Cyan
#UWhite='\e[4;37m'       # White
#
## Background
#On_Black='\e[40m'       # Black
#On_Red='\e[41m'         # Red
#On_Green='\e[42m'       # Green
#On_Yellow='\e[43m'      # Yellow
#On_Blue='\e[44m'        # Blue
#On_Purple='\e[45m'      # Purple
#On_Cyan='\e[46m'        # Cyan
#On_White='\e[47m'       # White
#
## High Intensity
#IBlack='\e[0;90m'       # Black
#IRed='\e[0;91m'         # Red
#IGreen='\e[0;92m'       # Green
#IYellow='\e[0;93m'      # Yellow
#IBlue='\e[0;94m'        # Blue
#IPurple='\e[0;95m'      # Purple
#ICyan='\e[0;96m'        # Cyan
#IWhite='\e[0;97m'       # White
#
## Bold High Intensity
#BIBlack='\e[1;90m'      # Black
#BIRed='\e[1;91m'        # Red
#BIGreen='\e[1;92m'      # Green
#BIYellow='\e[1;93m'     # Yellow
#BIBlue='\e[1;94m'       # Blue
#BIPurple='\e[1;95m'     # Purple
#BICyan='\e[1;96m'       # Cyan
#BIWhite='\e[1;97m'      # White
#
## High Intensity backgrounds
#On_IBlack='\e[0;100m'   # Black
#On_IRed='\e[0;101m'     # Red
#On_IGreen='\e[0;102m'   # Green
#On_IYellow='\e[0;103m'  # Yellow
#On_IBlue='\e[0;104m'    # Blue
#On_IPurple='\e[10;95m'  # Purple
#On_ICyan='\e[0;106m'    # Cyan
#On_IWhite='\e[0;107m'   # White

# }}}
#-------- Set Path {{{
#------------------------------------------------------
# http://askubuntu.com/questions/49784/how-is-bin-added-to-my-path
# Local installed package
#if [ -d "$HOME/.local/bin" ] ; then
#        PATH="$HOME/.local/bin:$PATH"
#fi
#if [ -d "$HOME/.screenlayout" ] ; then
#	PATH="$HOME/.screenlayout:$PATH"
#fi

# Go Packages (Golang)
#export GOPATH=~/.go
#export PATH="$PATH:$GOPATH/bin"

# NPM NodeJS Packages
#if [ -d "$HOME/node_modules/.bin" ] ; then
#    export PATH="$HOME/node_modules/.bin:$PATH"
#fi
#
## User Scripts
#if [ -d "$HOME/.scripts" ] ; then
#    export PATH="$HOME/.scripts:$PATH"
#fi
#
## }}}
##-------- External Files {{{
##------------------------------------------------------
#if [ -f ~/.hintrc ]; then
#    . ~/.hintrc
#fi

# }}}
#-------- Configurations {{{
#------------------------------------------------------
cfg-aliasrc() { $EDITOR ~/.aliasrc ;}
#cfg-abookrc() { $EDITOR ~/.abook/abookrc ;}
#cfg-addressbook() { $EDITOR ~/.abook/addressbook ;}
cfg-bashrc() { $EDITOR ~/.bashrc ;}
#cfg-blocklist() { $EDITOR ~/.scripts/blocklist.sh ;}
#cfg-clonezilla() { sudo $EDITOR /etc/drbl/drbl.conf ;}
# https://wiki.archlinux.org/index.php/Cursor_Themes#Choosing_and_Configuring_Cursor_Themes
#cfg-cursor() { $EDITOR ~/.icons/default/index.theme ;}
#cfg-cursor-list() { ls ~/.icons ;}
#cfg-emacs() { $EDITOR ~/.emacs ;}
#cfg-emulationstation() { $EDITOR ~/.emulationstation/es_systems.cfg ;}
#cfg-emulationstation-input() { $EDITOR ~/.emulationstation/es_input.cfg ;}
#cfg-flexget() { $EDITOR ~/.flexget/config.yml ;}
#cfg-fstab() { sudo $EDITOR /etc/fstab ;}
#cfg-gitignore() { $EDITOR ~/Public/dotfiles/.gitignore ;}
#cfg-giftd() { $EDITOR ~/.giFT/giftd.conf ;}
#cfg-group() { sudo $EDITOR /etc/group ;}
#cfg-grub() { sudo $EDITOR /etc/default/grub ;}
#cfg-hintrc() { $EDITOR ~/.hintrc ;}
cfg-hosts() { sudo $EDITOR /etc/hosts ;}
cfg-i3wm() { $EDITOR ~/.i3/config ;}
#cfg-inputrc() { $EDITOR ~/.inputrc ;}
#cfg-kodi-keyboard() { $EDITOR ~/.kodi/userdata/keymaps/keyboard.xml ;}
#cfg-kodi-confluencethumbnailview() { sudo $EDITOR /usr/share/kodi/addons/skin.confluence/720p/MyVideoNav.xml ;}
#cfg-lgogdownloader() { $EDITOR ~/.config/lgogdownloader/config.cfg ;}
#cfg-livestreamer() { $EDITOR ~/.livestreamerrc ;}
#cfg-mailcap() { $EDITOR ~/.mailcap ;}
#cfg-mbsyncrc() { $EDITOR ~/.mbsyncrc ;}
#cfg-mc() { $EDITOR ~/.config/mc/ini ;}
#cfg-mcomix() { $EDITOR ~/.config/mcomix/keybindings.conf ;}
#cfg-mpd() { $EDITOR ~/.mpd/mpd.conf ;}
#cfg-mplayer() { $EDITOR ~/.mplayer/config ;}
#cfg-mpv() { $EDITOR ~/.config/mpv/input.conf ;}
#cfg-mocp() { $EDITOR ~/.moc/config ;}
#cfg-muttrc() { $EDITOR ~/.muttrc ;}
#cfg-nanorc() { $EDITOR ~/.nanorc;}
#cfg-nap() { $EDITOR ~/.nap/napconf ;}
#cfg-ncmpcpp() { $EDITOR ~/.ncmpcpp/config ;}
#cfg-ncmpcpp-bindings() { $EDITOR ~/.ncmpcpp/bindings ;}
#cfg-newsbeuter() { $EDITOR ~/.newsbeuter/config ;}
#cfg-newsbeuter-queue() { $EDITOR ~/.newsbeuter/queue ;}
#cfg-newsbeuter-urls() { $EDITOR ~/.newsbeuter/urls ;}
#cfg-pastebinit() { $EDITOR ~/.pastebinit.xml ;}
#cfg-periscope() { $EDITOR ~/.config/periscope/config ;}
#cfg-pianobar() { $EDITOR ~/.config/pianobar/config ;}
#cfg-pianobar-libao() { sudo $EDITOR /etc/libao.conf ;}
#cfg-profile() { $EDITOR ~/.profile ;}
#cfg-pulseaudio() { sudo $EDITOR /etc/pulse/default.pa ;}
#cfg-pyload() { $EDITOR ~/.pyload/pyload.conf ;}
#cfg-pyradio() { $EDITOR ~/.pyradio.csv ;}
#cfg-qutebrowser() { $EDITOR ~/.config/qutebrowser/qutebrowser.conf ;}
#cfg-qutebrowser-keys() { $EDITOR ~/.config/qutebrowser/keys.conf ;}
#cfg-qutebrowser-quickmarks() { $EDITOR ~/.config/qutebrowser/quickmarks ;}
#cfg-quicktile() { $EDITOR ~/.config/quicktile.cfg ;}
cfg-ranger() { $EDITOR ~/.config/ranger/rc.conf ;}
#cfg-ranger-rifle() { $EDITOR ~/.config/ranger/rifle.conf ;}
#cfg-ranger-commands() { $EDITOR ~/.config/ranger/commands.py ;}
#cfg-retroarch() { $EDITOR ~/.config/retroarch/retroarch.cfg ;}
#cfg-rtv() { $EDITOR ~/.config/rtv/rtv.cfg ;}
#cfg-samba() { sudo $EDITOR /etc/samba/smb.conf ;}
#cfg-skippyxd() { $EDITOR ~/.skippy-xd.rc ;}
#cfg-slrnrc() { $EDITOR ~/.slrnrc ;}
#cfg-ssh-client() { sudo $EDITOR /etc/ssh/ssh_config ;}
#cfg-ssh-daemon() { sudo $EDITOR /etc/ssh/sshd_config ;}
#cfg-sudoers() { sudo $EDITOR /etc/sudoers ;}
#cfg-surfraw() { $EDITOR ~/.config/surfraw/bookmarks ;}
#cfg-surfraw-conf() { $EDITOR ~/.config/surfraw/conf ;}
#cfg-syncthing() { $EDITOR ~/.config/syncthing/config.xml ;}
#cfg-tmuxrc() { $EDITOR ~/.tmux.conf ;}
#cfg-torrentflix() { torrentflix --config=$EDITOR ;}
#cfg-tpb() { $EDITOR ~/.scripts/tpb.sh ;}
#cfg-transmission-daemon() { $EDITOR ~/.config/transmission-daemon/settings.json ;}
#cfg-transmission-ncurse() { $EDITOR ~/.config/transmission-remote-cli/settings.cfg ;}
#cfg-trz() { $EDITOR ~/.scripts/trz.sh ;}
#cfg-urlview() { $EDITOR ~/.urlview ;}
#cfg-updatedb() { sudo $EDITOR /etc/updatedb.conf ;}
cfg-vimrc() { $EDITOR ~/.vimrc ;}
#cfg-w3m() { $EDITOR ~/.w3m/config ;}
#cfg-w3m-keymap() { $EDITOR ~/.w3m/keymap ;}
#cfg-w3m-urimethodmap() { $EDITOR ~/.w3m/urimethodmap ;}
#cfg-wegorc() { $EDITOR ~/.wegorc ;}
#cfg-xboxdrv() { sudo $EDITOR /etc/default/xboxdrv ;}
#cfg-xresources() { $EDITOR ~/.Xresources ;}
#cfg-yaourtrc() { $EDITOR ~/.yaourtrc ;}
cfg-zshrc() { $EDITOR ~/.zshrc ;}
#cfg-zurlrc() { $EDITOR ~/.zurlrc ;}
#}}}
#-------- Configurations Reload {{{
#------------------------------------------------------
rld-bashrc() { source ~/.bashrc ;}
#rld-font() { fc-cache -v -f ;}
rld-grub() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
#rld-updatedb() { sudo updatedb ;}
#rld-xdefaults() { xrdb ~/.Xdefaults ;}
#rld-xmodmap() { xmodmap ~/.Xmodmap ;}
rld-xresources() { xrdb -load ~/.Xresources ;}
rld-zshrc() { source ~/.zshrc ;}
# }}}
#-------- Alias (Substitution) {{{
#------------------------------------------------------
# DESC: alias for mainly for existing commands

alias bc='bc -q -l'					# dont show opening msg, use math library
alias cal='cal -3'					# show 3 months
alias cp='cp -aiv'					# cp prompt confirmation
alias df='df -hT --total'				# human readable, print filetype, and total
alias du='du -d1 -h'					# max depth, human readable
#alias emacs='emacs -nw'					# cli mode
alias feh='feh --auto-zoom --scale-down -g 1360x768 -B white'
alias free='free -h'					# human readable
alias info='info --vi-keys'				# GNU info act like man command
alias ln='ln -iv'
alias lsblk='lsblk -o "KNAME,HOTPLUG,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID,MODEL,SERIAL"'
alias mkdir='mkdir -p -v'				# create if not exist, verbose
alias mocp='padsp mocp'                                 # moc player working with pulseaudio
alias mount='mount | column -t'				# align in column
alias mv='mv -iv'					# mv prompt confirmation
alias nano='nano -c -$'					# word wrapping
alias nvlc='nvlc --no-color'				# vlc black/white color
alias pdfgrep='pdfgrep -in'				# ignorecase, page number
alias qcp='qcp -f do'                                   # renameutils bulk copy (destination column only)
alias qmv='qmv -f do'                                   # renameutils bulk rename (destination column only)
alias rm='rm -Iv --preserve-root'			# rm interactive, prompt once only
#alias sr='sr -browser=$BROWSERCLI'			# open in cli browser
#alias surfraw='surfraw -browser=$BROWSER'		# open in gui browser
alias wget='wget -N -c'					# continues/resumes
#alias youtube-viewer='youtube-viewer -C -f -4 --results=6'	# color, fullscreen, 480p, number of results
#alias visudo='sudo EDITOR="$EDITOR" visudo'

# color for common commands
# tutorial video: http://www.youtube.com/watch?v=RbVCzxnKJL4
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

## }}}
#-------- Alias (Good List) {{{
#------------------------------------------------------
# DESC: custom alias

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."
alias empty='gvfs-trash --empty'			# empty trash globally (all partitions)
#alias garbage='gvfs-trash -f'
#alias garbage-list='gvfs-ls -h trash://'
#alias garbage-empty='gvfs-trash --empty'		# empty trash globally (all partitions)
#alias t="todo.sh"                                       # todotxt.sh program
alias trash='trash-put -v'
#alias vless="/usr/share/vim/vim74/macros/less.sh"       # vim as a pager
#alias vradio="vim ~/.pyradio.csv && killall mpg123"    # vim as radio player using pyradio.csv
#alias wttr='curl wttr.in'                               # wego weather forcast using only curl
#alias wttr-help='curl wttr.in/:help'

# }}}
#-------- Functions (Oneliner) {{{
#------------------------------------------------------

cpbak() { cp $1{,.bak} ;}		          # create backup copy
down4me() { curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g';}
killall-zombies() { kill -HUP $(ps -A -ostat,ppid | grep -e '[zZ]'| awk '{ print $2 }') ;}
mkdircd() { mkdir -p -v $1; cd $1 ;}	          # create folder then cd into it
nohup-command() { nohup "$@" >/dev/null 2>&1& }   # background a process w/o error msg
open() { xdg-open "$@" > /dev/null 2>&1 ;}        # open with default GUI program

# }}}
#-------- Functions (Good List) {{{
#------------------------------------------------------
# DESC: custom functions

update-grub() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
grub-update() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
grub-list() {
  RED='\033[0;31m'
  sudo grep "menuentry '" /boot/grub/grub.cfg | less -N
  echo -e "${RED} REMINDER: GRUB number starts at zero not one"
}

# DESC: color the manpages
# DEMO: http://www.youtube.com/watch?v=9BFaLAa428k
# LINK: https://wiki.archlinux.org/index.php/Man_page#Colored_man_pages
man() {
  env LESS_TERMCAP_mb=$'\E[01;31m' \
  LESS_TERMCAP_md=$'\E[01;31m' \
  LESS_TERMCAP_me=$'\E[0m' \
  LESS_TERMCAP_se=$'\E[0m' \
  LESS_TERMCAP_so=$'\E[01;44;33m' \
  LESS_TERMCAP_ue=$'\E[0m' \
  LESS_TERMCAP_us=$'\E[01;32m' \
  man "$@"
}

# list and grep with file permission
lsg() {
  keyword=$(echo "$@" |  sed 's/ /.*/g')
  ls -hlA --color=yes \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' \
  | grep -iE $keyword
}

# ls recent items at bottom with green TODAY yellow YESTERDAY substituted with file permission also
# https://www.reddit.com/r/archlinux/comments/41s1w4/what_is_your_favorite_one_liner_to_use/cz50y1m
# http://askubuntu.com/a/152005
lst() {
  ls -vAFq --color=yes -got --si --time-style=long-iso "$@" \
  | sed "s/$(date +%Y-%m-%d)/\x1b[32m     TODAY\x1b[m/;s/$(date +'%Y-%m-%d' -d yesterday)/\x1b[33m YESTERDAY\x1b[m/" \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' | tac
}

lsl() {
  ls -hl --color=yes "$@" \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}'
}

# DESC: cli calculator (Ctrl+D to exit)
# DEMO: http://www.youtube.com/watch?v=JkyodHenTuc
# LINK: http://docs.python.org/library/math.html
calc() {
  if which python2 &>/dev/null; then
    python2 -ic "from __future__ import division; from math import *; from random import *"
  elif which python3 &>/dev/null; then
    python3 -ic "from math import *; import cmath"
  elif which bc &>/dev/null; then
    bc -q -l
  else
    echo "Requires python2, python3 or bc for calculator features"
  fi
}

# }}}
#-------- System Information {{{
#------------------------------------------------------
m-sound() { arecord -L && arecord -l && cat /proc/asound/pcm ;} #List audio capture card/mic
m-distro() { uname -a && lsb_release -a ;}
m-connectip() {
  echo "--------------- Connected Devices -----------------"
    nmap -sn $(netstat -rn | awk 'FNR == 3 {print $2}')/24
  echo "---------------------------------------------------"
}

# uses ip or ifconfig, good on older or newer system
m-ip() {
  echo "--------------- Network Information ---------------"
  echo "router ip:" $(netstat -rn | awk 'FNR == 3 {print $2}')
  # newer system like archlinux
  ip addr | awk '/global/ {print $1,$2}' | cut -d\/ -f1
  ip addr | awk '/global/ {print $3,$4}'
  ip addr | awk '/ether/ {print $1,$2}'
  ip addr | awk '/scope link/ {print $1,$2}' | cut -d\/ -f1
  # older system like debian
  ifconfig | awk '/inet addr/ {print $1,$2}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/Bcast/ {print $3}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/inet addr/ {print $4}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/HWaddr/ {print $4,$5}'
  ifconfig | awk '/Scope:Link/ {print $1,$3}' | cut -d\/ -f1
  # echo External IP $(curl -s http://checkip.dyndns.org/ | grep -o "[[:digit:].]\+")
  # echo External IP: $(curl -s http://ipaddr.io/)
  # echo External IP: $(curl -s https://icanhazip.com/)
  # echo External IP: $(curl -s https://ifconfig.co/)
  # echo External IP: $(curl -s http://pasteip.me/api/cli/ && echo)
  echo external ip: $(curl -s http://ipecho.net/plain)
  echo "---------------------------------------------------"
}
#}}

####################
##### GRAPHICS #####
####################

#-------- Image Resizer (32|96|128|480|600|768|720|960|1080) {{{
#------------------------------------------------------
# Resizing Pictures to different resolutions

image-resize-32x32() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 32x32 "${arg%.*}"_32x32_resized."${arg##*.}"
  done
}

image-resize-96x96() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 96x96 "${arg%.*}"_96x96_resized."${arg##*.}"
  done
}

image-resize-128x128() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 128x128 "${arg%.*}"_128x128_resized."${arg##*.}"
  done
}

image-resize-640x480() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 640x480 "${arg%.*}"_640x480_resized."${arg##*.}"
  done
}

image-resize-800x600() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 800x600 "${arg%.*}"_800x600_resized."${arg##*.}"
  done
}

image-resize-1024x768() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 1024x768 "${arg%.*}"_1024x768_resized."${arg##*.}"
  done
}

image-resize-1280x720() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 1280x720 "${arg%.*}"_1280x720_resized."${arg##*.}"
  done
}

image-resize-1280x960() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 1280x960 "${arg%.*}"_1280x960_resized."${arg##*.}"
  done
}

image-resize-1920x1080() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 1920x1080 "${arg%.*}"_1920x1080_resized."${arg##*.}"
  done
}

# }}}

####################
##### INTERNET #####
####################

#-------- Youtube-dl (Stream|Download|RipAudio) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=MFxlwVhwayg
# DESC: download/stream media from many online sites
youtube-dl-stream() { youtube-dl -o - "$1" | $PLAYER - ;}

# DESC: convert youtube to audio (youtube.com only)
# -f 171 = webm audio (vorbis)
# -f 140 = m4a (aac)
#yt2ogg() { youtube-dl -c --restrict-filenames -x --audio-format vorbis -o "%(title)s.%(ext)s" -f 171 "$@" ;}
#yt2wav() { youtube-dl -c --restrict-filenames -x --audio-format wav -o "%(title)s.%(ext)s" -f 171 "$@" ;}
#yt2mp3() { youtube-dl -c --restrict-filenames -x --audio-format mp3 -o "%(title)s.%(ext)s" -f 171 "$@" ;}
#yt2webmaudio() { youtube-dl -c --restrict-filenames -o "%(title)s.%(ext)s" -f 171 "$@" ;}
#yt2m4a() { youtube-dl -c --restrict-filenames -o "%(title)s.%(ext)s" -f 140 "$@" ;}

# }}}
#-------- RipMe CLI (Bulk Image Downloader) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=gX9-tYGB-mY
# DESC: image album downloader for wallpaper, comic, hentai, manga
# LINK: https://github.com/4pr0n/ripme
# REFF: https://github.com/4pr0n/ripme/wiki/How-To-Run-RipMe
# REFF: https://github.com/4pr0n/ripme/issues/8 (Supported Sites)

# }}}
#-------- Wget (Retrieve Files From The Web) {{{
#------------------------------------------------------
# http://stackoverflow.com/a/18709707
wget-extension() {
  if [ $# -lt 2 ]; then
    echo -e "Download all files with specific extension on a webpage"
    echo -e "\nUsage:   $0 <file_extension> <url>"
    echo -e "\nExample: $0 mp3 http://example.com/files/"
    echo -e "\nGoogle: http://lmgtfy.com/?q=intitle%3Aindex.of+mp3+-html+-htm+-php+-asp+-txt+-pls+madonna"
    return 1
  fi

  savepath=~/Downloads
  outputdir_name=$(echo "$2" | rev | cut -d\/ -f2 | rev)

  mkdir -pv "$savepath/$outputdir_name"
  cd "$savepath/$outputdir_name" && wget -r -l1 -H -t1 -nd -N -np -A "$1" -erobots=off "$2"
}



#-------- Transmission CLI v2 {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=ee4XzWuapsE
# DESC: lightweight torrent client; interface from cli, webui, ncurses, and gui
# WEBUI:  http://localhost:9091/transmission/web/
# 	  http://192.168.1.xxx:9091/transmission/web/

tsm-clearcompleted() {
  transmission-remote -l | grep 100% | grep Done | \
  awk '{print $1}' | xargs -n 1 -I % transmission-remote -t % -r
}

# display numbers of ip being blocked by the blocklist (credit: smw from irc #transmission)
tsm-count() {
  echo "Blocklist rules:" $(curl -s --data \
  '{"method": "session-get"}' localhost:9091/transmission/rpc -H \
  "$(curl -s -D - localhost:9091/transmission/rpc | grep X-Transmission-Session-Id)" \
  | cut -d: -f 11 | cut -d, -f1)
}

# DEMO: http://www.youtube.com/watch?v=TyDX50_dC0M
# DESC: merge multiple ip blocklist into one
# LINK: https://github.com/gotbletu/shownotes/blob/master/blocklist.sh
tsm-blocklist() {
  echo -e "${Red} Stopping Transmission Daemon ${Color_Off}"
    killall transmission-daemon
  echo -e "${Yellow} Updating Blocklist ${Color_Off}"
    ~/.scripts/blocklist.sh
  echo -e "${Green} Restarting Transmission Daemon ${Color_Off}"
    transmission-daemon
    sleep 3
  echo -e "${Red}--------------- Number of IP Blocking -------------${Color_Off}"
    tsm-count
}
tsm-altdownloadspeed() { transmission-remote --downlimit "${@:-900}" ;}	# download default to 900K, else enter your own
tsm-altdownloadspeedunlimited() { transmission-remote --no-downlimit ;}
tsm-limitupload() { transmission-remote --uplimit "${@:-10}" ;}	# upload default to 10kpbs, else enter your own
tsm-limituploadunlimited() { transmission-remote --no-uplimit ;}
tsm-askmorepeers() { transmission-remote -t"$1" --reannounce ;}
tsm-daemon() { transmission-daemon ;}
tsm-quit() { killall transmission-daemon ;}
tsm-add() { transmission-remote --add "$1" ;}
tsm-pause() { transmission-remote -t"$1" --stop ;}		# <id> or all
tsm-start() { transmission-remote -t"$1" --start ;}		# <id> or all
tsm-purge() { transmission-remote -t"$1" --remove-and-delete ;} # delete data also
tsm-remove() { transmission-remote -t"$1" --remove ;}		# leaves data alone
tsm-info() { transmission-remote -t"$1" --info ;}
tsm-speed() { while true;do clear; transmission-remote -t"$1" -i | grep Speed;sleep 1;done ;}
tsm-grep() { transmission-remote --list | grep -i "$1" ;}
tsm() { transmission-remote --list ;}

# DEMO: http://www.youtube.com/watch?v=hLz7ditUwY8
# LINK: https://github.com/fagga/transmission-remote-cli
# DESC: ncurses frontend to transmission-daemon
tsm-ncurse() { transmission-remote-cli ;}

#}}}
#-------- Convert to Audio {{{
#------------------------------------------------------
# REFF: https://trac.ffmpeg.org/wiki/Encode/MP3
#       https://trac.ffmpeg.org/wiki/Encode/AAC
#       https://trac.ffmpeg.org/wiki/TheoraVorbisEncodingGuide

convert2audio-mp3() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.m4a"
    echo -e "$0 file1.m4a file2.m4a file3.m4a"
    echo -e "$0 *.m4a"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mp3 ]
    do
      ffmpeg -i "$arg" -codec:a libmp3lame -qscale:a 2 "${arg%.*}".mp3
    done
  done
}

convert2audio-m4a() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".m4a ]
    do
      ffmpeg -i "$arg" -codec:a aac -qscale:a 6 -strict experimental "${arg%.*}".m4a
    done
  done
}

convert2audio-ogg() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".ogg ]
    do
      ffmpeg -i "$arg" -codec:a libvorbis -qscale:a 5 -vn "${arg%.*}".ogg
    done
  done
}

convert2audio-wav() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".wav ]
    do
      ffmpeg -i "$arg" "${arg%.*}".wav
    done
  done
}

convert2audio-webm() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".webm ]
    do
      ffmpeg -i "$arg" -codec:a libvorbis -qscale:a 5 -vn "${arg%.*}".webm
    done
  done
}

convert2audio-wavmono() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}"-monoaudiotrack.wav ]
    do
      ffmpeg -i "$arg" -codec:a pcm_mulaw -ar 8000 -ac 1 "${arg%.*}"-monoaudiotrack.wav
    done
  done
}

convert2audio-wma() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".wma ]
    do
      ffmpeg -i "$arg" -codec:a wmav2 -b:a 128k "${arg%.*}".wma
    done
  done
}

# }}}
#-------- Convert to Video {{{
#------------------------------------------------------
# REFF: http://linuxconfig.org/ffmpeg-audio-format-conversions

convert2video-mp4-h265() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mp4 ]
    do
      # ffmpeg -i "$arg" -codec:v libx264 -preset medium -crf 22 -codec:a aac -qscale:a 6 -strict experimental "${arg%.*}".mp4
      # ffmpeg -i "$arg" -codec:v libx265 -preset medium -crf 28 -codec:a aac -qscale:a 6 -strict experimental "${arg%.*}".mp4
      ffmpeg -i "$arg" -codec:v libx265 -preset medium -crf 28 -codec:a aac -qscale:a 6 "${arg%.*}".mp4
      # ffmpeg -i input -c:v libx265 -preset medium -crf 28 -c:a aac -b:a 128k output.mp4
    done
  done
}

convert2video-mp4() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mp4 ]
    do
      ffmpeg -i "$arg" -codec:v libx264 -preset medium -crf 22 -codec:a aac -qscale:a 6 -strict experimental "${arg%.*}".mp4
    done
  done
}

convert2video-avi() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".avi ]
    do
      ffmpeg -i "$arg" -codec:v mpeg4 -vtag xvid -qscale:v 3 -codec:a libmp3lame -qscale:a 4 "${arg%.*}".avi
    done
  done
}
convert2video-ogv() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".ogv ]
    do
      ffmpeg -i "$arg" -codec:v libtheora -qscale:v 7 -codec:a libvorbis -qscale:a 5 "${arg%.*}".ogv
    done
  done
}
convert2video-mpg() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mpg ]
    do
      ffmpeg -i "$arg" -codec:v mpeg2video -qscale:v 2 -codec:a mp2 -b:a 192k "${arg%.*}".mpg
    done
  done
}
convert2video-mkv() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mkv ]
    do
      ffmpeg -i "$arg" -codec:v libx264 -preset medium -crf 22 -codec:a libvorbis -qscale:a 5 "${arg%.*}".mkv
    done
  done
}
convert2video-webm() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".webm ]
    do
      ffmpeg -i "$arg" -codec:v libvpx -crf 10 -b:v 1M -codec:a libvorbis "${arg%.*}".webm
    done
  done
}

# }}}

####################
##### OFFICE #######
####################

#-------- Calibre CLI v3 [last updated July 29, 2016] {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=FeoVsC4U_0A
# LINK: http://manual.calibre-ebook.com/cli/calibredb.html
# DESC: ebook manager supports many formats and devices; interfaces with cli, webui, gui

# define your library path
#cbbook=~/MA_Calibre/Book
#cbcomic=~/MA_Calibre/Comic
#cbdojinshi=~/MA_Calibre/Dojinshi
#cbsuper=~/MA_Calibre/Super
#
#cmx-list() {
#  if [ $# -lt 1 ]; then
#    echo -e "calibredb list files within a library"
#    echo -e "\nUsage:\n$0 <library>"
#    echo -e "\nExample:\n$0 \$cbcomic\n"
#    return 1
#  fi
#
#  calibredb list -f authors,title,tags,rating --library-path "$1"
#}
#
#cmx-search() {
#  if [ $# -lt 2 ]; then
#    echo -e "calibredb search files within a library"
#    echo -e "\nUsage:\n$0 <library> <keywords>"
#    echo -e "\nExample:\n$0 \$cbcomic marvel"
#    echo -e "$0 \$cbcomic 'the walking dead'\n"
#    return 1
#  fi
#
#  calibredb list -s "${@:2}" -f authors,title,tags,rating --library-path "$1"
#}
#
#cmx-add() {
#  if [ $# -lt 2 ]; then
#    echo -e "calibredb add new files to a library"
#    echo -e "\nUsage:\n$0 <library> <file>"
#    echo -e "\nExample:\n$0 \$cbcomic file.cbz"
#    echo -e "$0 \$cbcomic file1.cbz file2.cbz"
#    echo -e "$0 \$cbcomic file.epub file2.pdf file3.cbr\n"
#    return 1
#  fi
#
#  calibredb add "${@:2}" --library-path "$1"
#}
#
#cmx-remove() {
#  if [ $# -lt 2 ]; then
#    echo -e "calibredb remove files from a library"
#    echo -e "\nUsage:\n$0 <library> <id>"
#    echo -e "$0 <library> <range>"
#    echo -e "\nExample:\n$0 \$cbcomic 100"
#    echo -e "$0 \$cbcomic 50-55"
#    echo -e "$0 \$cbcomic 100,120-127"
#    return 1
#  fi
#
#  calibredb remove "${@:2}" --library-path "$1"
#}
#
#cmx-show() {
#  if [ $# -lt 2 ]; then
#    echo -e "calibredb show file metadata from a library"
#    echo -e "\nUsage:\n$0 <library> <id>"
#    echo -e "\nExample:\n$0 \$cbcomic 16"
#    return 1
#  fi
#
#  calibredb show_metadata "${@:2}" --library-path "$1" | html2text
#}
#
## DESC: Calibre WebUI content server (open brower to http://192.168.1.xxx:port )
## LINK: http://manual.calibre-ebook.com/cli/calibre-server.html
#cmx-server() {
#  calibre-server -p 57770 --daemonize --with-library "$cbbook"
#  calibre-server -p 57771 --daemonize --with-library "$cbcomic"
#  calibre-server -p 57772 --daemonize --with-library "$cbdojinshi"
#  calibre-server -p 57773 --daemonize --with-library "$cbsuper"
#}
#cmx-quit() { kill $(ps -ef | grep -i '[C]alibre-server' | awk '{print $2}') ;}
#cmx-recipes() { ebook-convert --list-recipes | less ;}
#
#}}}

# }}}
#-------- Format USB Stick/HDD/SDCards {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=7txO1cdNJsQ
# DESC: format USB Stick/Hard Drive; It will create a single partition that fills the whole drive space

format2usb-ext2() {
  if [ $# -lt 2 ]; then
    echo -e "format and create a partition that fills up the whole device"
    echo -e "\nUsage: $0 <label> <device>"
    echo -e "Example: $0 MY_USB sdx"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # list out all drives
  lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"
  
  echo -n -e "${Red}WARNING: You are about to FORMAT a drive. Do you want to continue? [y/n] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "... You chose to continue"
  else
    return 1
  fi

  # delete existing partition then create new linux partition
  echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nw" | sudo fdisk /dev/"$2"

  # delete partiton x8 using d\n\n
  # d    delete a partition
  #      default, partition

  # o    create a new empty DOS partition table
  # n    add a new partition
  # p    print the partition table
  # 1    partition number 1
  #      default, start immediately after preceding partition
  #      default, extend partition to end of disk
  # w    write table to disk and exit

  # format device
  echo -e "y\n" | sudo mkfs.ext2 -L "$1" /dev/"$2"1

  # set permission
  mkdir -p /tmp/testmount
  sudo mount /dev/"$2"1 /tmp/testmount
  sudo chmod -R 777 /tmp/testmount
  sudo umount /tmp/testmount
  rmdir /tmp/testmount
}

format2usb-ext3() {
  if [ $# -lt 2 ]; then
    echo -e "format and create a partition that fills up the whole device"
    echo -e "\nUsage: $0 <label> <device>"
    echo -e "Example: $0 MY_USB sdx"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # list out all drives
  lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"

  echo -n -e "${Red}WARNING: You are about to FORMAT a drive. Do you want to continue? [y/n] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "... You chose to continue"
  else
    return 1
  fi

  # delete existing partition then create new linux partition
  echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nw" | sudo fdisk /dev/"$2"

  # delete partiton x8 using d\n\n
  # d    delete a partition
  #      default, partition

  # o    create a new empty DOS partition table
  # n    add a new partition
  # p    print the partition table
  # 1    partition number 1
  #      default, start immediately after preceding partition
  #      default, extend partition to end of disk
  # w    write table to disk and exit

  # format device
  echo -e "y\n" | sudo mkfs.ext3 -L "$1" /dev/"$2"1

  # set permission
  mkdir -p /tmp/testmount
  sudo mount /dev/"$2"1 /tmp/testmount
  sudo chmod -R 777 /tmp/testmount
  sudo umount /tmp/testmount
  rmdir /tmp/testmount
}

format2usb-ext4() {
  if [ $# -lt 2 ]; then
    echo -e "format and create a partition that fills up the whole device"
    echo -e "\nUsage: $0 <label> <device>"
    echo -e "Example: $0 MY_USB sdx"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # list out all drives
  lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"

  echo -n -e "${Red}WARNING: You are about to FORMAT a drive. Do you want to continue? [y/n] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "... You chose to continue"
  else
    return 1
  fi

  # delete existing partition then create new linux partition
  echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nw" | sudo fdisk /dev/"$2"

  # delete partiton x8 using d\n\n
  # d    delete a partition
  #      default, partition

  # o    create a new empty DOS partition table
  # n    add a new partition
  # p    print the partition table
  # 1    partition number 1
  #      default, start immediately after preceding partition
  #      default, extend partition to end of disk
  # w    write table to disk and exit

  # format device
  echo -e "y\n" | sudo mkfs.ext4 -L "$1" /dev/"$2"1

  # set permission
  mkdir -p /tmp/testmount
  sudo mount /dev/"$2"1 /tmp/testmount
  sudo chmod -R 777 /tmp/testmount
  sudo umount /tmp/testmount
  rmdir /tmp/testmount
}

format2usb-fat32() {
  if [ $# -lt 2 ]; then
    echo -e "format and create a partition that fills up the whole device"
    echo -e "\nUsage: $0 <label> <device>"
    echo -e "Example: $0 MY_USB sdx"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # list out all drives
  lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"

  echo -n -e "${Red}WARNING: You are about to FORMAT a drive. Do you want to continue? [y/n] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "... You chose to continue"
  else
    return 1
  fi

  # delete existing partition then create new linux partition
  echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\nb\nw" | sudo fdisk /dev/"$2"

  # delete partiton x8 using d\n\n
  # d    delete a partition
  #      default, partition

  # o    create a new empty DOS partition table
  # n    add a new partition
  # p    print the partition table
  # 1    partition number 1
  #      default, start immediately after preceding partition
  #      default, extend partition to end of disk
  # t    change a partition type (L to list all types)
  # b    W95 FAT32
  # w    write table to disk and exit

  # fat32 likes the labels to be in uppercase
  label_name=$(echo "$1" | tr '[:lower:]' '[:upper:]')

  # format device
  sudo mkfs.fat -F 32 -n "$label_name" -I /dev/"$2"1

  # set permission
  mkdir -p /tmp/testmount
  sudo mount /dev/"$2"1 /tmp/testmount
  sudo chmod -R 777 /tmp/testmount
  sudo umount /tmp/testmount
  rmdir /tmp/testmount
}

format2usb-ntfs() {
  if [ $# -lt 2 ]; then
    echo -e "format and create a partition that fills up the whole device"
    echo -e "\nUsage: $0 <label> <device>"
    echo -e "Example: $0 MY_USB sdx"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # list out all drives
  lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"

  echo -n -e "${Red}WARNING: You are about to FORMAT a drive. Do you want to continue? [y/n] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "... You chose to continue"
  else
    return 1
  fi

  # delete existing partition then create new linux partition
  echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\n7\nw" | sudo fdisk /dev/"$2"

  # delete partiton x8 using d\n\n
  # d    delete a partition
  #      default, partition

  # o    create a new empty DOS partition table
  # n    add a new partition
  # p    print the partition table
  # 1    partition number 1
  #      default, start immediately after preceding partition
  #      default, extend partition to end of disk
  # t    change a partition type (L to list all types)
  # 7    HPFS/NTFS/exFAT
  # w    write table to disk and exit

  # format device
  sudo mkfs.ntfs -f -L "$1" /dev/"$2"1

  # set permission
  mkdir -p /tmp/testmount
  sudo mount /dev/"$2"1 /tmp/testmount
  sudo chmod -R 777 /tmp/testmount
  sudo umount /tmp/testmount
  rmdir /tmp/testmount
}

# }}}
#-------- Mount Disc Images (ISO|NRG|BIN|MDF|IMG) {{{
#------------------------------------------------------

mount-discimage() {
  if [ $# -lt 1 ]
  then
    echo -e "mount ISO filesystem images (iso,nrg,bin,mdf,img)"
    echo -e "\nUsage:\n$0 <disc_image>"
    echo -e "\nExample:\n$0 disc_image.iso"
    echo -e "$0 disc_image.iso disc_image2.bin disc_image3.mdf"
    echo -e "$0 *.iso"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    fuseiso -n -p "$arg" "/tmp/$arg"
  done

  # if mount was sucessful then cd and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/tmp/$1" && ls
  else
    return 1
  fi
}

unmount-discimage() {
  if [ $# -lt 1 ]
  then
    echo -e "unmount ISO filesystem images (iso,nrg,bin,mdf,img)"
    echo -e "\nUsage:\n$0 <mount_point|disc_image>"
    echo -e "\nExample:\n$0 disc_image.iso"
    echo -e "$0 disc_image.iso disc_image2.bin"
    echo -e "$0 mount_point1 mount_point2"
    echo -e "cd /tmp && $0 mount_point"
    echo -e "cd /tmp && $0 *.iso"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    fusermount -u "$arg"
  done
}

mount-img() {
  if [ $# -lt 1 ]; then
    echo -e "mount image to access files"
    echo -e "\nUsage: $0 <img_file>"
    echo -e "\nExample: $0 foo.img"
    return 1
  fi

  mkdir -p "/tmp/$1"
  sudo mount "$PWD/$1" "/tmp/$1"

  # if mount was sucessful then cd and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/tmp/$1" && ls
  else
    return 1
  fi
}

unmount-img() {
  if [ $# -lt 1 ]; then
    echo -e "unmount image"
    echo -e "\nUsage: $0 <img_file>"
    echo -e "\nExample: $0 foo.img"
    return 1
  fi

  sudo umount "/tmp/$1"
  rmdir "/tmp/$1"
}

# }}}
#-------- Mount Archive (ISO|ZIP|RAR|TAR) {{{
#------------------------------------------------------
# http://ubuntuforums.org/showthread.php?t=1207096
mount-archive() {
  if [ $# -lt 1 ]
  then
    echo -e "mount archive files (iso|zip|rar|tar...etc)"
    echo -e "\nUsage:\n$0 <archive>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 *.zip"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    gvfs-mount "archive://$( ( echo -n 'file://' ; readlink -f $arg ; ) | perl -MURI::Escape -lne 'print uri_escape($_)')"
  done

  # if mount was sucessful then cd into gvfs dir and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/run/user/$(id -u)/gvfs" && ls
  else
    return 1
  fi
}

unmount-archive() {
  if [ $# -lt 1 ]
  then
    echo -e "unmount archive files (iso|zip|rar|tar)"
    echo -e "\nUsage:\n$0 <mount_point>"
    echo -e "\nExample:\n$0 archive:host=file%253Afoo%bar.zip"
    echo -e "cd /run/user/${UID}/gvfs/ && $0 archive:host=file%253Afoo%bar.zip"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    gvfs-mount -u "/run/user/$(id -u)/gvfs/$arg"
  done
}

# }}}

# }}}
#-------- Alias Custom {{{
#------------------------------------------------------
 alias sudo='sudo -i'
 alias sudo='sudo '					# make aliases work with sudo
 alias ps="ps aux | grep -v grep | grep "
 alias ff="find . |grep "
 alias pp="ps aux |grep "
 alias oo="xdg-open "

#alias xclipin='xclip -sel c -in <'
#alias xclipout='xclip -sel c -out >'
alias psg='ps aux|grep -v grep|grep -i '
psgrep() { ps axuf | grep -v grep | grep "$@" -i --color=auto; }
alias sshxforwarding='ssh -XCc blowfish-cbc,arcfour'
alias sshxtrusted='ssh -Y'
#alias stackexchange='lynx http://column80.com'		# lookup information
#alias srb='surfraw -browser=$BROWSER'			# use for surfraw bookmarks
#alias xev-keycode="xev | grep 'keycode\|button'"
# alias weechat='weechat-curses'
alias lsd='ls -1d */'					# ls folders only
alias l='ls -l'
alias lsf='ls --color=always -p | grep -v '/$''		# ls files only
alias lsa='ls -GghA'
alias lsx='ls -lX'
# alias lst='ls -Ggthrc'				# ls by time/changes, newest at bottom



# }}}
#-------- Functions {{{
#------------------------------------------------------

#unlock() { keepassc -d ~/.keepass/masterlock.kdb ;}

# }}}
#-------- Convert to Image {{{
#------------------------------------------------------
# pdftoppm convert pdf to images
# http://askubuntu.com/a/50180
convert_pdf_to_png() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to PNG image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -png "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert_pdf_to_jpg() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to JPEG image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -jpeg "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert_pdf_to_tiff() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to TIFF image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -tiff "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert_pdf_to_pgm-grayscale() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to PGM Grayscale image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -gray "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert_pdf_to_pbm-monochrome() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to PBM Monochrome image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -mono "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}


# }}}
#-------- Convert to Documents {{{
#------------------------------------------------------
convert_images_to_pdf() {
    if [ $# -lt 1 ]
    then
        echo -e "convert images into one single pdf"
        echo -e "\nUsage:\n$0 <images>"
        echo -e "\nexample:\n$0 image1.jpg image2.jpg image3.jpg"
        echo -e "\n$0 *.jpg"
        echo -e "\n$0 *.png"

        return 1
    fi
    convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf
}


# Using libreoffice
convert_to_html() { soffice --headless --convert-to "html:XHTML Writer File:UTF8" "$1" ;}
convert_to_txt() { soffice --headless --convert-to "txt:Text (encoded):UTF8" "$1" ;}


# http://duff-johnson.com/2014/02/17/the-8-most-popular-document-formats-on-the-web/
convert_to_pdf() {
	if [ $# -lt 1 ]; then
		echo -e "Usage: $0 <file_name>.<doc|docx|ppt|pptx|xls|xlsx|txt|rtf|html|epub|cbr|cbz|cbt|cb7|cba|jpg|jpeg|pbm|pgm|png>"
		echo -e "\nsingle:   $0 file.doc"
		echo -e "\nmultiple: $0 file1.jpg file2.jpg file3.jpg"
		echo -e "\nwildcard: $0 *.png"
		echo -e "\nRequirement: calibre imagemagick libreoffice"
        return 1
	else
		if [ ! -f "${1%.*}".pdf ] ; then
		NAME=${1%.*}
		case "$1" in
		  *.doc|*.docx)    soffice --headless --convert-to pdf "$@" ;;
		  *.ppt|*.pptx)    soffice --headless --convert-to pdf "$@" ;;
		  *.xls|*.xlsx)    soffice --headless --convert-to pdf "$@" ;;
		  *.txt|*.rtf)     soffice --headless --convert-to pdf "$@" ;;
		  *.html)          soffice --headless --convert-to pdf "$@" ;;
		  *.epub)          soffice --headless --convert-to pdf "$@" ;;
		  *.cbr|*.cbz|*.cb7|*.cbt|*.cba)    ebook-convert "$1" .pdf ;;
		  *.jpg|*.jpeg|*.pbm|*.pgm|*.png)   convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf ;;
		  *)               echo "'$1' - unsupported format or file does not exist" ;;
		esac
		else
			echo "'${1%.*}.pdf' - file exist, skipping to prevent overwrite"
		fi
	fi
}


#}}}
#-------- Spell Checking / Translation Related {{{
#------------------------------------------------------
# spell checking
# tutorial video: http://www.youtube.com/watch?v=UEwz5eeaZzc
check-word() { echo "$1" | aspell -a ;}
check-list() { cat "$1" | aspell list ;}
check-file() { aspell check "$1" ;}

mp3cut() {

	# example: cut from 5s to 10s; mpgtx -s file.mp3 "[00:05-00:10]" -b file-output
	mpgtx -s "$1" "["$2":"$3"-"$4":"$5"]" -b "${1%.*}"-output."${1##*.}"

	}
#mplayer playlist
mplist(){ mplayer -playlist <(tree -aif "$1" | awk '/\.(mp3|wav|ogg|avi|mpg|iso)$/'); }
#mplist(){ mplayer -playlist <(find "$1" -regex '.*\.\(mp3\|wav\|ogg\|avi\|mpg\|iso\)' | sort); }
#-------- i3 / Openbox {{{
#------------------------------------------------------
# wallpaper path


setwallpaper() {
ConnectedMonitor="$(xrandr | awk '/ connected/ {print $1}' | head -n 1)"
PATH_WALLPAPER=~/picture

	# find current running windows manager
	CURRENT_WM="$(wmctrl -m | grep "Name:" | awk '{print $2}')"

	# mate
	if [ $CURRENT_WM = Marco ]; then
	gsettings set org.mate.background picture-filename "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# xfce
	# tutorial video: http://www.youtube.com/watch?v=tL9uVT8D6k4
	if [[ $DESKTOP_SESSION = Xfwm4 ]] || [[ $DESKTOP_SESSION = "Xfce Session" ]]; then
	xfconf-query -c xfce4-desktop -p /backdrop/screen0/monitor"$ConnectedMonitor"/workspace0/last-image -s "$PWD"/"$1"
	fi

	# i3
	if [ $DESKTOP_SESSION = i3 ]; then
	# feh --randomize --bg-fill "$PATH_WALLPAPER"/*
	feh --randomize --bg-fill "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# gnome shell
	# tutorial video: http://www.youtube.com/watch?v=B_VnPXy3VCw
	if [ $DESKTOP_SESSION = GNOME ]; then
	gsettings set org.gnome.desktop.background picture-uri file://"$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi


	# gnome2
	if [ $DESKTOP_SESSION = GNOME ]; then
	gconftool-2 -t str -s /desktop/gnome/background/picture_filename "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# lxde
	# tutorial video: http://www.youtube.com/watch?v=5xzfBiHuknk
	if [ $DESKTOP_SESSION = LXDE ]; then
	pcmanfm -w "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi
	}


chwallpaper() {
ConnectedMonitor="$(xrandr | awk '/ connected/ {print $1}' | head -n 1)"
PATH_WALLPAPER=~/picture

	# find current running windows manager
	CURRENT_WM="$(wmctrl -m | grep "Name:" | awk '{print $2}')"

	# mate
	if [ $CURRENT_WM = Marco ]; then
	gsettings set org.mate.background picture-filename "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# xfce
	# tutorial video: http://www.youtube.com/watch?v=tL9uVT8D6k4
	if [[ $DESKTOP_SESSION = Xfwm4 ]] || [[ $DESKTOP_SESSION = "Xfce Session" ]]; then
	xfconf-query -c xfce4-desktop -p /backdrop/screen0/monitor"$ConnectedMonitor"/workspace0/last-image -s "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# i3
	if [ $DESKTOP_SESSION = i3 ]; then
	# feh --randomize --bg-fill "$PATH_WALLPAPER"/*
	feh --randomize --bg-fill "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# gnome shell
	# tutorial video: http://www.youtube.com/watch?v=B_VnPXy3VCw
	if [ $DESKTOP_SESSION = GNOME ]; then
	gsettings set org.gnome.desktop.background picture-uri file://"$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi


	# gnome2
	if [ $DESKTOP_SESSION = GNOME ]; then
	gconftool-2 -t str -s /desktop/gnome/background/picture_filename "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# lxde
	# tutorial video: http://www.youtube.com/watch?v=5xzfBiHuknk
	if [ $DESKTOP_SESSION = LXDE ]; then
	pcmanfm -w "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi
	}



